/*DESCRIPTION
Quincunx 또는 Galton box로 알려져 있는 콩기계는 영국의 과학자 Sir Francis Galton의 이름을 따서 만들어진 장치이다. 콩기계는 수직으로 세워진 판위에 나무못이 삼각형의 형태로 균등하게 고정되어 있다.

The bean machine, also known as a quincunx or the Galton box, is a device for statistics experiments named after English scientist Sir Francis Galton. It consists of an upright board with evenly spaced nails (or pegs) in a triangular form, as shown in Figure 7.13.



콩기계 상단의 입구에 떨어진 공은 중력에 의해서 떨어지는데, 나무못에 부딪칠 때마다 50%의 확률로 왼쪽 또는 오른쪽으로 방향을 전환한다. 기계 하단에는 떨어진 콩을 담기위한 슬롯이 있으며, 떨어진 콩은 슬롯에 쌓이게 된다. 예를 들어, Figure 7.13b에서 공의 경로는 LLRRLLR 이고 Figure 7.13c에서 공의 경로는 RLRRLRR이다. 

여러분은 볼을 떨어 뜨린 횟수 N과 슬롯의 개수 M 그리고 떨어지는 공의 경로를 입력으로 받아, 최종적으로 오름차순으로 슬롯에 몇개의 콩이 들어 있는지 출력하는 프로그램을 작성해야 한다. 

Balls are dropped from the opening of the board. Every time a ball hits a nail, it has a 50% chance of falling to the left or to the right. The piles of balls are accumulated in the slots at the bottom of the board. Write a program that simulates the bean machine. Your program should prompt the user to enter the number N of the balls and the number M of the slots in the machine, and the falling  path of each ball, then display the final buildup of the balls in the slots in a histogram. For example, the path for the ball in Figure 7.13b is LLRRLLR and the path for the ball in Figure 7.13c is RLRRLRR. 

 

INPUT
* Line 1 : 볼을 떨어 뜨린 횟수 N (1~100)

* Line 2 : 슬롯의 개수 M (2~100)

* Line 3 ~ N+2 : 경로를 나타내는 M-1길이의 문자열  

OUTPUT
* Line 1 ~ M : 슬롯에 들어 있는 볼의 개수

 

SAMPLE INPUT
5
8
LRLRLRR
RRLLLRR
LLRLLRR
RRLLLLL
LRLRRLR
SAMPLE OUTPUT
0
0
1
1
3
0
0
0
HINT
Create an array named slots. Each element in slots stores the number of balls in a slot. Each ball falls into a slot via a path. The number of Rs in a path is the position of the slot where the ball falls. For example, for the path LRLRLRR, the ball falls into slots[4], and for the path is RRLLLLL, the ball falls into slots[2]

 

 

SOURCE
JAVA2015 PE7.21 */

import java.util.*;
public class Main {

    public static void main(String[] args) {

        Scanner scan=new Scanner(System.in);
        String a=scan.nextLine();
        int a1=Integer.parseInt(a);
        String b=scan.nextLine();
        int b1=Integer.parseInt(b);



        String[] str=new String[a1];
        int[] s=new int[b1];

        for (int i=0;i<a1;i++) {
            str[i]=scan.nextLine();
        }


        for (int i=0;i<a1;i++) {
            int c=0;


            for (int j=0;j<b1-1;j++) {
                char beggining=str[i].charAt(j);

                if (beggining=='R') {
                    c++;
                }


                else
                    continue;
            }
            s[c]++;
        }



        for (int i=0;i<b1-1;i++) {
            System.out.println(s[i]);
        }
        System.out.print(s[b1-1]);
    }
}



